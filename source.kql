let SecretAccessEvents = cluster("https://dsms.kusto.windows.net/").database("dsms").table("SecretAccessEvent");
SecretAccessEvents
// | where Name in ("/aad/ests/prod/usgaz/accountsas/adhoc/estsusgovkeysusgazbkpsas","/aad/ests/ppe/eus2c/accountsas/adhoc/estsppekeyseus2czbkpsas")
// | where UserClaim  contains "admin" or UserClaim contains "SecretReader"
| take 10
// Basic table query with filtering and projection
let startTime = ago(24h);
let endTime = now();
Logs
| where Timestamp between (startTime .. endTime)
| where Level == "Error" or Level == "Critical"
| project 
    Timestamp,
    Source,
    Message,
    ApplicationId,
    OperationId
// Using join operations
| join kind=inner (
    ApplicationLogs 
    | where AppName == "MainService"
    | project OperationId, AppVersion, UserName
) on OperationId
// Aggregation and time series analysis
| summarize 
    ErrorCount = count(),
    UniqueUsers = dcount(UserName),
    FirstError = min(Timestamp),
    LastError = max(Timestamp)
    by ApplicationId, AppVersion, bin(Timestamp, 1h)
// Time series visualization
| render timechart with (
    xcolumn = Timestamp,
    ycolumns = ErrorCount,
    title = "Hourly Error Count by Application"
)
// Function definition for reuse
.create-or-alter function GetErrorsByApp(timespan: timespan) {
    Logs
    | where Timestamp > ago(timespan)
    | where Level == "Error"
    | summarize ErrorCount = count() by ApplicationId
    | sort by ErrorCount desc
}

// Using the function
GetErrorsByApp(3d)
// Table query with string operations
SecurityEvents
| where EventName has_any ("Login", "Authentication")
| extend ParsedMessage = parse_json(EventData)
| extend 
    UserName = tostring(ParsedMessage.user),
    SourceIP = tostring(ParsedMessage.ip_address)
| where SourceIP !startswith "10." and SourceIP !startswith "192.168."
| summarize
    LoginAttempts = count(),
    FailedLogins = countif(EventResult == "Failed"),
    SuccessfulLogins = countif(EventResult == "Success")
    by UserName, SourceIP
| where FailedLogins > 5
| order by FailedLogins desc
// Advanced analytics with machine learning functions
| evaluate autocluster()

cluster('https://dsms.kusto.windows.net').database('dsms').SecretAccessEvent
| extend Cloud = 'Public'
| union (cluster('dsms.kusto.windows.net').database('dsmsFF').SecretAccessEvent |extend Cloud='FairFax')
       ,(cluster('dsms.kusto.windows.net').database('dsmsMC').SecretAccessEvent |extend Cloud='Mooncake')
| where TIMESTAMP > ago(180d)
| where Instance !endswith "azure-test.net" and Instance != 'OneBox' // Exclude Test dSMS Endpoints
| where ServiceTreeId != 'null' // Exclude non-GetSecret API calls
| where User contains "\\"// User only calls
// | where ServiceTreeId == <Your ServiceTreeId>
| where User append()

// Define a table for user activity logs
let UserActivityLogs = cluster("https://mycluster.kusto.windows.net").database("mydatabase").table("UserActivity");

// Basic query to retrieve the first 10 rows
UserActivityLogs
| take 10

// Define a time range for filtering
let startTime = ago(7d);
let endTime = now();

// Filter logs within the time range and specific conditions
UserActivityLogs
| where Timestamp between (startTime .. endTime)
| where ActivityType in ("Login", "Logout", "FileAccess")
| project Timestamp, UserName, ActivityType, Resource
// Summarize activity counts by user
| summarize ActivityCount = count() by UserName

// Join with another table to enrich data
| join kind=inner (
    cluster("https://mycluster.kusto.windows.net").database("mydatabase").table("UserDetails")
    | project UserName, Department, Role
) on UserName

// Aggregate data by department
| summarize TotalActivities = count() by Department
// Render a bar chart for visualization
| render barchart with (
    xcolumn = Department,
    ycolumn = TotalActivities,
    title = "Total Activities by Department"
)

// Define a reusable function for failed login attempts
.create-or-alter function GetFailedLogins(timespan: timespan) {
    UserActivityLogs
    | where Timestamp > ago(timespan)
    | where ActivityType == "Login" and Result == "Failed"
    | summarize FailedAttempts = count() by UserName
    | sort by FailedAttempts desc
}

// Query with string operations
UserActivityLogs
| where Resource contains "confidential" or Resource contains "restricted"
| extend ParsedDetails = parse_json(Details)
| extend 
    FileName = tostring(ParsedDetails.fileName),
    FileSize = toint(ParsedDetails.fileSize)
| where FileSize > 1000
| summarize TotalAccess = count() by FileName
// Use distinct to find unique users
| distinct UserName
// Use extend to calculate additional fields
| extend AccessDuration = datetime_diff('minute', EndTime, StartTime)
// Use evaluate to detect anomalies
| evaluate anomaly_detection(TotalAccess, 0.95)
// Use make-series to create a time series
| make-series AccessCount = count() on Timestamp step 1h by FileName
// Render a timechart for visualization
| render timechart with (
    xcolumn = Timestamp,
    ycolumns = AccessCount,
    title = "File Access Over Time"
)
// Use mv-expand to expand multi-value fields
| mv-expand Tags
// Use parse to extract fields from a string
| parse Resource with "File:" FileName " Size:" FileSize
// Use project-away to remove unnecessary columns
| project-away Details
// Use project-rename to rename columns
| project-rename User = UserName
// Use top to find the most accessed files
| top 5 by AccessCount desc
// Use union to combine multiple tables
union UserActivityLogs, cluster("https://mycluster.kusto.windows.net").database("mydatabase").table("AdminLogs")
| serialize RowNumber = row_number()
| reduce by FileName

// Use lookup to join with another table
| lookup kind=leftouter (
    cluster("https://mycluster.kusto.windows.net").database("mydatabase").table("FileDetails")
    | project FileName, FileType
) on FileName

// Render a pie chart for visualization
| render piechart with (
    title = "File Access Distribution by Type"
)

// Use parse-where to filter based on parsed fields
| parse-where Resource with "File:" FileName " Size:" FileSize
| where FileSize > 500

// Use mv-apply to apply a function to multi-value fields
| mv-apply Tags to typeof(string) on (
    summarize TagCount = count() by Tags
)

// Use bin to group data into time intervals
| summarize AccessCount = count() by bin(Timestamp, 1h)
| summarize UniqueUsers = dcount(UserName)
| project-keep UserName, ActivityType
range x from 1 to 10 step 1

// Use materialize to persist intermediate results
let MaterializedData = materialize(
    UserActivityLogs
    | where ActivityType == "FileAccess"
    | summarize AccessCount = count() by FileName
);

// Use externaldata to query external data sources
externaldata(UserId: string, UserName: string)[h@"https://example.com/userdata.csv"]
| where UserName contains "admin"

// Use database() to query another database
database("AnotherDatabase").table("Logs")
| where ActivityType == "Error"

// Use table() to query a specific table
table("SpecificTable")
| where ActivityType == "Warning"

// Use datatable to create an inline table
datatable(UserId: string, UserName: string)
[
    "1", "Alice",
    "2", "Bob"
]
| where UserName == "Alice"
| summarize AdminAccessCount = countif(UserName contains "admin")
| extend UserIdString = tostring(UserId)
| extend FileSizeInt = toint(FileSize)
| extend AccessTime = todatetime(Timestamp)
| extend LowercaseUser = tolower(UserName)
| extend UppercaseUser = toupper(UserName)
| extend ColumnType = typeof(UserName)
| where UserName has "admin"
| where UserName has_any ("admin", "manager")
| where UserName startswith "A"
| where UserName endswith "Z"
| where UserName in ("Alice", "Bob")
| where not (UserName contains "guest")
| sort by Timestamp asc
| sort by AccessCount desc

// Use let to define variables
let Threshold = 100;
UserActivityLogs
| where AccessCount > Threshold
// Use policy to define retention policies
.show retention policy on table UserActivityLogs
// Use timechart for time-based visualizations
| render timechart with (
    xcolumn = Timestamp,
    ycolumn = AccessCount,
    title = "Access Count Over Time"
)